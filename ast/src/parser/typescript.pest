Number = @{ (ASCII_DIGIT | "." | "-" | "_")+ }
Name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
String = @{ "\"" ~ (ASCII_ALPHANUMERIC | "." | " " | "\\" | "/")* ~ "\"" }
Identifier = @{ Name ~ ("." ~ Name)* }
Boolean = { "true" | "false" }
Undefined = { "undefined" }
Null = { "null" }
Array = { "[" ~ Expression? ~ ("," ~ Expression)* ~ ","? ~ "]" }
Operand = @{ "+" | "-" | "*" | "/" | "%" | "<" | ">" | "<=" | ">=" | "&&" | "||" | "==" | "!="}
Term = { Number | Boolean | Null | Undefined | String | Array | Call | Closur | Identifier | "(" ~ Expression ~ ")" }
PrefixTerm = { ("++" | "--") ~ Term }
PostTerm = { Term ~ ("++" | "--") }
Expression = {
    Term ~ Operand ~ Term
    | PrefixTerm
    | PostTerm
    | Term
}

CallList = { Expression ~ ("," ~ Expression)* ~ ","? }
Call = { Identifier ~ "(" ~ CallList ~ ")" }

Const = { "const" ~ Name ~ "=" ~ Expression }
Let = { "let" ~ Name ~ "=" ~ Expression }
Assign = { Identifier ~ "=" ~ Expression }
Return = { "return" ~ Expression }

If = { "if" ~ "(" ~ Expression ~ ")" ~ Block ~ ElseIf* ~ Else? }
ElseIf = { "else" ~ "if" ~ "(" ~ Expression ~ ")" ~ Block }
Else = { "else" ~ Block }

Break = { "break" }
Case = { "case" ~ Term ~ ":" ~ Statement* ~ Break? }
Default = { "default" ~ ":" ~ Statement* ~ Break? }
Switch = { "switch" ~ "(" ~ Expression ~ ")" ~ "{" ~ (Case | Default)* ~ "}" }

While = { "while" ~ "(" ~ Expression ~ ")" ~ Block }
For = { "for" ~ "(" ~ Let ~ ";" ~ Expression ~ ";" ~ Expression ~ ")" ~ Block }
ForOf = { "for" ~ "(" ~ Name ~ "of" ~ Expression ~ ")" ~ Block }
ForIn = { "for" ~ "(" ~ Name ~ "in" ~ Expression ~ ")" ~ Block }

NameList = { Name ~ ("," ~ Name)* }
IdentifierList = { Identifier ~ ("," ~ Identifier)* }

TypeIdentifier = { "boolean" | "null" | "any" | "number" | "string" | "void" | Identifier ~ TemplateDefinition | Identifier }
TypeIdentifiers = { TypeIdentifier ~ ("|" ~ TypeIdentifier)* }

TemplateName = { Name ~ ("extends" ~ TypeIdentifiers)? }
TemplateDefinition = { "<" ~ TemplateName ~ ">" }

InterfaceExtends = { "extends" ~ IdentifierList }
InterfaceAttribute = { Param }
InterfaceMethod = { Name ~ FunctionDefinition }
InterfaceBody = { "{" ~ (InterfaceMethod | InterfaceAttribute)* ~ "}" }
Interface = { "interface" ~ Name ~ InterfaceExtends? ~ InterfaceBody }

ClassAttribute = { Param }
MethodPrefix = { "static"? ~ "async"? }
Method = { Name ~ FunctionDefinition ~ Block }
Extends = { "extends" ~ Identifier }
Implements = { "implements" ~ IdentifierList }
ClassBody = { "{" ~ (Method | ClassAttribute)* ~ "}" }
Class = { "class" ~ Name ~ TemplateDefinition? ~ Extends? ~ Implements? ~ ClassBody }

TypeTuple = { Name ~ ":" ~ TypeIdentifier }
TypeBlock = { "{" ~ TypeTuple? ~ ("," ~ TypeTuple)* ~ ","? ~ "}" }
TypeDefinition = { (Name | TypeBlock) ~ ("|" ~ (Name | TypeBlock))* }
Type = { "type" ~ Name ~ "=" ~ TypeDefinition }

Param = { Name ~ (":" ~ TypeIdentifiers)? ~ ("=" ~ Term)? }
ParamList = { Param? ~ ("," ~ Param)* }
ReturnType = { ":" ~ TypeIdentifiers }
FunctionDefinition = { "(" ~ ParamList ~ ")" ~ ReturnType? }
Function = { "function" ~ Name ~ TemplateDefinition? ~ FunctionDefinition ~ Block }

Closur = { FunctionDefinition ~ "=>" ~ Block | Statement }

Block = { "{" ~ Statement* ~ "}" }
Statement = { Const | Let | Assign | If | Switch | While | For | ForOf | ForIn | Function | Call | Return | Block }

Import = { "import" ~ String }
ImportName = { Name ~ ("as" ~ Name)? }
ImportNameList = { ImportName ~ ("," ~ ImportName)* }
ImportFrom = { "import" ~ "{" ~ ImportNameList ~ "}" ~ "from" ~ String }
Statements = { SOI ~ (Import | ImportFrom | Interface | Class | Type | Statement)* ~ EOI }

WHITESPACE = _{ " " | "\n" | "\t" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }